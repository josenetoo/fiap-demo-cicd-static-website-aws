#!/bin/bash

# üß™ Script de Teste do Ambiente - FIAP CI/CD Demo
# Autor: Professor Jos√© Neto - FIAP POS Tech

echo "üéì FIAP CI/CD Demo - Teste do Ambiente"
echo "====================================="

# Fun√ß√£o para verificar comando
check_command() {
    if command -v $1 &> /dev/null; then
        echo "‚úÖ $1 est√° instalado: $(which $1)"
        if [ "$1" = "node" ]; then
            echo "   Vers√£o: $(node --version)"
        elif [ "$1" = "npm" ]; then
            echo "   Vers√£o: $(npm --version)"
        elif [ "$1" = "aws" ]; then
            echo "   Vers√£o: $(aws --version)"
        fi
    else
        echo "‚ùå $1 n√£o est√° instalado"
        return 1
    fi
}

echo ""
echo "üîç Verificando depend√™ncias..."
echo "------------------------------"

# Verificar Node.js
check_command "node"
node_status=$?

# Verificar npm
check_command "npm"
npm_status=$?

# Verificar Git
check_command "git"
git_status=$?

# Verificar AWS CLI
check_command "aws"
aws_status=$?

echo ""
echo "üìÅ Verificando arquivos do projeto..."
echo "------------------------------------"

# Verificar arquivos essenciais
files_to_check=(
    "package.json"
    "src/App.js"
    "src/App.css"
    "src/index.js"
    "public/index.html"
    ".github/workflows/deploy.yml"
)

missing_files=0
for file in "${files_to_check[@]}"; do
    if [ -f "$file" ]; then
        echo "‚úÖ $file existe"
    else
        echo "‚ùå $file n√£o encontrado"
        missing_files=$((missing_files + 1))
    fi
done

echo ""
echo "üîê Verificando configura√ß√£o AWS..."
echo "---------------------------------"

# Verificar se profile fiapaws existe
if aws configure list --profile fiapaws &> /dev/null; then
    echo "‚úÖ Profile 'fiapaws' configurado"
    
    # Testar conex√£o (se poss√≠vel)
    if aws sts get-caller-identity --profile fiapaws &> /dev/null; then
        echo "‚úÖ Conex√£o AWS funcionando"
        echo "   Account: $(aws sts get-caller-identity --profile fiapaws --query Account --output text 2>/dev/null || echo 'N/A')"
    else
        echo "‚ö†Ô∏è Profile configurado mas sem conex√£o (credenciais podem ter expirado)"
    fi
else
    echo "‚ùå Profile 'fiapaws' n√£o configurado"
fi

# Verificar .env.local
if [ -f ".env.local" ]; then
    echo "‚úÖ Arquivo .env.local existe"
    if grep -q "REACT_APP_BUCKET_NAME" .env.local; then
        bucket_name=$(grep "REACT_APP_BUCKET_NAME" .env.local | cut -d'=' -f2)
        echo "   Bucket configurado: $bucket_name"
    fi
else
    echo "‚ùå Arquivo .env.local n√£o encontrado"
fi

echo ""
echo "üìä Resumo do Status"
echo "==================="

total_errors=0

if [ $node_status -ne 0 ]; then
    echo "‚ùå Node.js precisa ser instalado"
    total_errors=$((total_errors + 1))
fi

if [ $npm_status -ne 0 ]; then
    echo "‚ùå npm precisa ser instalado"
    total_errors=$((total_errors + 1))
fi

if [ $git_status -ne 0 ]; then
    echo "‚ùå Git precisa ser instalado"
    total_errors=$((total_errors + 1))
fi

if [ $aws_status -ne 0 ]; then
    echo "‚ùå AWS CLI precisa ser instalado"
    total_errors=$((total_errors + 1))
fi

if [ $missing_files -gt 0 ]; then
    echo "‚ùå $missing_files arquivo(s) do projeto n√£o encontrado(s)"
    total_errors=$((total_errors + 1))
fi

if [ $total_errors -eq 0 ]; then
    echo ""
    echo "üéâ Ambiente est√° pronto para uso!"
    echo "Pr√≥ximos passos:"
    echo "1. Execute: ./scripts/setup-aws.sh (se ainda n√£o executou)"
    echo "2. Configure as secrets no GitHub"
    echo "3. Fa√ßa seu primeiro commit e push"
else
    echo ""
    echo "‚ö†Ô∏è $total_errors problema(s) encontrado(s)"
    echo "Consulte SETUP-ENVIRONMENT.md para instru√ß√µes de instala√ß√£o"
fi

echo ""
echo "üìö Documenta√ß√£o dispon√≠vel:"
echo "- README.md: Guia completo"
echo "- SETUP-ENVIRONMENT.md: Configura√ß√£o do ambiente"
echo "- LIVE-GUIDE.md: Roteiro da live"
echo "- EXERCICIOS.md: Exerc√≠cios pr√°ticos"
